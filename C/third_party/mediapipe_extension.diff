diff --git a/mediapipe/gpu/gl_calculator_helper.cc b/mediapipe/gpu/gl_calculator_helper.cc
index aa708e7..c146f56 100644
--- a/mediapipe/gpu/gl_calculator_helper.cc
+++ b/mediapipe/gpu/gl_calculator_helper.cc
@@ -137,6 +137,10 @@ GlTexture GlCalculatorHelper::CreateDestinationTexture(int output_width,
   return impl_->CreateDestinationTexture(output_width, output_height, format);
 }
 
+GlTexture GlCalculatorHelper::CreateDestinationTexture(const GpuBuffer& pixel_buffer) {
+  return impl_->CreateDestinationTexture(pixel_buffer);
+}
+
 GlContext& GlCalculatorHelper::GetGlContext() const {
   return impl_->GetGlContext();
 }
diff --git a/mediapipe/gpu/gl_calculator_helper.h b/mediapipe/gpu/gl_calculator_helper.h
index b5cc699..e0aa081 100644
--- a/mediapipe/gpu/gl_calculator_helper.h
+++ b/mediapipe/gpu/gl_calculator_helper.h
@@ -144,6 +144,8 @@ class GlCalculatorHelper {
       int output_width, int output_height,
       GpuBufferFormat format = GpuBufferFormat::kBGRA32);
 
+  GlTexture CreateDestinationTexture(const GpuBuffer& pixel_buffer);
+
   // The OpenGL name of the output framebuffer.
   GLuint framebuffer() const;
 
diff --git a/mediapipe/gpu/gl_calculator_helper_impl.h b/mediapipe/gpu/gl_calculator_helper_impl.h
index 4381111..cdabc45 100644
--- a/mediapipe/gpu/gl_calculator_helper_impl.h
+++ b/mediapipe/gpu/gl_calculator_helper_impl.h
@@ -49,6 +49,7 @@ class GlCalculatorHelperImpl {
   // Creates a framebuffer and returns the texture that it is bound to.
   GlTexture CreateDestinationTexture(int output_width, int output_height,
                                      GpuBufferFormat format);
+  GlTexture CreateDestinationTexture(const GpuBuffer& gpu_buffer);
 
   GLuint framebuffer() const { return framebuffer_; }
   void BindFramebuffer(const GlTexture& dst);
diff --git a/mediapipe/gpu/gl_calculator_helper_impl_common.cc b/mediapipe/gpu/gl_calculator_helper_impl_common.cc
index 2e4ab10..6e5e073 100644
--- a/mediapipe/gpu/gl_calculator_helper_impl_common.cc
+++ b/mediapipe/gpu/gl_calculator_helper_impl_common.cc
@@ -195,14 +195,18 @@ GlTextureBufferSharedPtr GlCalculatorHelperImpl::MakeGlTextureBuffer(
 
 GlTexture GlCalculatorHelperImpl::CreateDestinationTexture(
     int width, int height, GpuBufferFormat format) {
+  GpuBuffer buffer =
+      gpu_resources_.gpu_buffer_pool().GetBuffer(width, height, format);
+
+  return CreateDestinationTexture(buffer);
+}
+
+GlTexture GlCalculatorHelperImpl::CreateDestinationTexture(const GpuBuffer& gpu_buffer) {
   if (!framebuffer_) {
     CreateFramebuffer();
   }
 
-  GpuBuffer buffer =
-      gpu_resources_.gpu_buffer_pool().GetBuffer(width, height, format);
-  GlTexture texture = MapGpuBuffer(buffer, 0);
-
+  GlTexture texture = MapGpuBuffer(gpu_buffer, 0);
   return texture;
 }
 
diff --git a/mediapipe/gpu/gl_scaler_calculator.cc b/mediapipe/gpu/gl_scaler_calculator.cc
index e50ef22..9cf0f2f 100644
--- a/mediapipe/gpu/gl_scaler_calculator.cc
+++ b/mediapipe/gpu/gl_scaler_calculator.cc
@@ -12,6 +12,8 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 
+// Modified to enable to specify the target GpuBuffer
+
 #include "mediapipe/framework/calculator_framework.h"
 #include "mediapipe/framework/port/ret_check.h"
 #include "mediapipe/framework/port/status.h"
@@ -58,6 +60,7 @@ namespace mediapipe {
 //   existing calculator options, depending on field merge_fields.
 //   OUTPUT_DIMENSIONS: the output width and height in pixels.
 //   ROTATION: the counterclockwise rotation angle in degrees.
+//   DESTINATION: the target GpuBuffer
 // These can also be specified as options.
 // To enable horizontal or vertical flip, specify them in options.
 // The flipping is applied after rotation.
@@ -82,6 +85,7 @@ class GlScalerCalculator : public CalculatorBase {
 
  private:
   GlCalculatorHelper helper_;
+  GpuBuffer dst_buffer_;
   int dst_width_ = 0;
   int dst_height_ = 0;
   float dst_scale_ = -1.f;
@@ -109,6 +113,9 @@ absl::Status GlScalerCalculator::GetContract(CalculatorContract* cc) {
   }
   MP_RETURN_IF_ERROR(GlCalculatorHelper::UpdateContract(cc));
 
+  if (cc->InputSidePackets().HasTag("DESTINATION")) {
+    cc->InputSidePackets().Tag("DESTINATION").Set<GpuBuffer>();
+  }
   if (cc->InputSidePackets().HasTag("OPTIONS")) {
     cc->InputSidePackets().Tag("OPTIONS").Set<GlScalerCalculatorOptions>();
   }
@@ -175,6 +182,13 @@ absl::Status GlScalerCalculator::Open(CalculatorContext* cc) {
     dst_width_ = dimensions[0];
     dst_height_ = dimensions[1];
   }
+
+  if (HasTagOrIndex(cc->InputSidePackets(), "DESTINATION", 1)) {
+    dst_buffer_ = cc->InputSidePackets().Tag("DESTINATION").Get<GpuBuffer>();
+    dst_width_ = dst_buffer_.width();
+    dst_height_ = dst_buffer_.height();
+  }
+
   if (cc->InputSidePackets().HasTag("ROTATION")) {
     rotation_ccw = cc->InputSidePackets().Tag("ROTATION").Get<int>();
   }
@@ -185,7 +199,7 @@ absl::Status GlScalerCalculator::Open(CalculatorContext* cc) {
 }
 
 absl::Status GlScalerCalculator::Process(CalculatorContext* cc) {
-  if (cc->Inputs().HasTag("OUTPUT_DIMENSIONS")) {
+  if (!dst_buffer_ && cc->Inputs().HasTag("OUTPUT_DIMENSIONS")) {
     if (cc->Inputs().Tag("OUTPUT_DIMENSIONS").IsEmpty()) {
       // OUTPUT_DIMENSIONS input stream is specified, but value is missing.
       return absl::OkStatus();
@@ -264,9 +278,18 @@ absl::Status GlScalerCalculator::Process(CalculatorContext* cc) {
               MakePacket<float>(left_right_padding).At(cc->InputTimestamp()));
     }
 
-    auto dst = helper_.CreateDestinationTexture(dst_width, dst_height,
-                                                GetOutputFormat());
-
+    GlTexture dst;
+#if MEDIAPIPE_GPU_BUFFER_USE_CV_PIXEL_BUFFER
+    // for iOS
+    dst = helper_.CreateDestinationTexture(dst_width, dst_height, GetOutputFormat());
+#else
+    if (dst_buffer_) {
+      dst_buffer_.GetGlTextureBufferSharedPtr()->Reuse();
+      dst = helper_.CreateDestinationTexture(dst_buffer_);
+    } else {
+      dst = helper_.CreateDestinationTexture(dst_width, dst_height, GetOutputFormat());
+    }
+#endif
     helper_.BindFramebuffer(dst);
     glActiveTexture(GL_TEXTURE1);
     glBindTexture(src1.target(), src1.name());
diff --git a/mediapipe/graphs/iris_tracking/BUILD b/mediapipe/graphs/iris_tracking/BUILD
index 86e667b..e0062a1 100644
--- a/mediapipe/graphs/iris_tracking/BUILD
+++ b/mediapipe/graphs/iris_tracking/BUILD
@@ -30,10 +30,9 @@ cc_library(
         "//mediapipe/calculators/image:image_file_properties_calculator",
         "//mediapipe/calculators/image:opencv_encoded_image_to_image_frame_calculator",
         "//mediapipe/calculators/image:opencv_image_encoder_calculator",
-        "//mediapipe/graphs/iris_tracking/calculators:update_face_landmarks_calculator",
         "//mediapipe/graphs/iris_tracking/subgraphs:iris_and_depth_renderer_cpu",
         "//mediapipe/modules/face_landmark:face_landmark_front_cpu",
-        "//mediapipe/modules/iris_landmark:iris_landmark_left_and_right_cpu",
+        "//mediapipe/modules/iris_landmark:iris_landmark_left_and_right_from_face_landmarks_cpu",
     ],
 )
 
@@ -43,10 +42,9 @@ cc_library(
         "//mediapipe/calculators/core:constant_side_packet_calculator",
         "//mediapipe/calculators/core:flow_limiter_calculator",
         "//mediapipe/calculators/core:split_vector_calculator",
-        "//mediapipe/graphs/iris_tracking/calculators:update_face_landmarks_calculator",
         "//mediapipe/graphs/iris_tracking/subgraphs:iris_renderer_cpu",
         "//mediapipe/modules/face_landmark:face_landmark_front_cpu",
-        "//mediapipe/modules/iris_landmark:iris_landmark_left_and_right_cpu",
+        "//mediapipe/modules/iris_landmark:iris_landmark_left_and_right_from_face_landmarks_cpu",
     ],
 )
 
@@ -58,10 +56,9 @@ cc_library(
         "//mediapipe/calculators/core:split_vector_calculator",
         "//mediapipe/calculators/video:opencv_video_decoder_calculator",
         "//mediapipe/calculators/video:opencv_video_encoder_calculator",
-        "//mediapipe/graphs/iris_tracking/calculators:update_face_landmarks_calculator",
         "//mediapipe/graphs/iris_tracking/subgraphs:iris_renderer_cpu",
         "//mediapipe/modules/face_landmark:face_landmark_front_cpu",
-        "//mediapipe/modules/iris_landmark:iris_landmark_left_and_right_cpu",
+        "//mediapipe/modules/iris_landmark:iris_landmark_left_and_right_from_face_landmarks_cpu",
     ],
 )
 
@@ -71,10 +68,9 @@ cc_library(
         "//mediapipe/calculators/core:constant_side_packet_calculator",
         "//mediapipe/calculators/core:flow_limiter_calculator",
         "//mediapipe/calculators/core:split_vector_calculator",
-        "//mediapipe/graphs/iris_tracking/calculators:update_face_landmarks_calculator",
         "//mediapipe/graphs/iris_tracking/subgraphs:iris_and_depth_renderer_gpu",
         "//mediapipe/modules/face_landmark:face_landmark_front_gpu",
-        "//mediapipe/modules/iris_landmark:iris_landmark_left_and_right_gpu",
+        "//mediapipe/modules/iris_landmark:iris_landmark_left_and_right_from_face_landmarks_gpu",
     ],
 )
 
diff --git a/mediapipe/graphs/iris_tracking/iris_depth_cpu.pbtxt b/mediapipe/graphs/iris_tracking/iris_depth_cpu.pbtxt
index 3597e7f..8d67b5d 100644
--- a/mediapipe/graphs/iris_tracking/iris_depth_cpu.pbtxt
+++ b/mediapipe/graphs/iris_tracking/iris_depth_cpu.pbtxt
@@ -82,40 +82,12 @@ node {
   }
 }
 
-# Gets two landmarks which define left eye boundary.
-node {
-  calculator: "SplitNormalizedLandmarkListCalculator"
-  input_stream: "face_landmarks"
-  output_stream: "left_eye_boundary_landmarks"
-  node_options: {
-    [type.googleapis.com/mediapipe.SplitVectorCalculatorOptions] {
-      ranges: { begin: 33 end: 34 }
-      ranges: { begin: 133 end: 134 }
-      combine_outputs: true
-    }
-  }
-}
-
-# Gets two landmarks which define right eye boundary.
-node {
-  calculator: "SplitNormalizedLandmarkListCalculator"
-  input_stream: "face_landmarks"
-  output_stream: "right_eye_boundary_landmarks"
-  node_options: {
-    [type.googleapis.com/mediapipe.SplitVectorCalculatorOptions] {
-      ranges: { begin: 362 end: 363 }
-      ranges: { begin: 263 end: 264 }
-      combine_outputs: true
-    }
-  }
-}
-
 # Detects iris landmarks, eye contour landmarks, and corresponding rect (ROI).
 node {
-  calculator: "IrisLandmarkLeftAndRightCpu"
+  calculator: "IrisLandmarkLeftAndRightFromFaceLandmarksCpu"
   input_stream: "IMAGE:input_image"
-  input_stream: "LEFT_EYE_BOUNDARY_LANDMARKS:left_eye_boundary_landmarks"
-  input_stream: "RIGHT_EYE_BOUNDARY_LANDMARKS:right_eye_boundary_landmarks"
+  input_stream: "FACE_LANDMARKS:face_landmarks"
+  output_stream: "UPDATED_FACE_LANDMARKS:updated_face_landmarks"
   output_stream: "LEFT_EYE_CONTOUR_LANDMARKS:left_eye_contour_landmarks"
   output_stream: "LEFT_EYE_IRIS_LANDMARKS:left_iris_landmarks"
   output_stream: "LEFT_EYE_ROI:left_eye_rect_from_landmarks"
@@ -124,20 +96,6 @@ node {
   output_stream: "RIGHT_EYE_ROI:right_eye_rect_from_landmarks"
 }
 
-node {
-  calculator: "ConcatenateNormalizedLandmarkListCalculator"
-  input_stream: "left_eye_contour_landmarks"
-  input_stream: "right_eye_contour_landmarks"
-  output_stream: "refined_eye_landmarks"
-}
-
-node {
-  calculator: "UpdateFaceLandmarksCalculator"
-  input_stream: "NEW_EYE_LANDMARKS:refined_eye_landmarks"
-  input_stream: "FACE_LANDMARKS:face_landmarks"
-  output_stream: "UPDATED_FACE_LANDMARKS:updated_face_landmarks"
-}
-
 # Renders annotations and overlays them on top of the input images.
 node {
   calculator: "IrisAndDepthRendererCpu"
diff --git a/mediapipe/graphs/iris_tracking/iris_tracking_cpu.pbtxt b/mediapipe/graphs/iris_tracking/iris_tracking_cpu.pbtxt
index c0a3857..cec2ff3 100644
--- a/mediapipe/graphs/iris_tracking/iris_tracking_cpu.pbtxt
+++ b/mediapipe/graphs/iris_tracking/iris_tracking_cpu.pbtxt
@@ -61,40 +61,12 @@ node {
   }
 }
 
-# Gets two landmarks which define left eye boundary.
-node {
-  calculator: "SplitNormalizedLandmarkListCalculator"
-  input_stream: "face_landmarks"
-  output_stream: "left_eye_boundary_landmarks"
-  node_options: {
-    [type.googleapis.com/mediapipe.SplitVectorCalculatorOptions] {
-      ranges: { begin: 33 end: 34 }
-      ranges: { begin: 133 end: 134 }
-      combine_outputs: true
-    }
-  }
-}
-
-# Gets two landmarks which define right eye boundary.
-node {
-  calculator: "SplitNormalizedLandmarkListCalculator"
-  input_stream: "face_landmarks"
-  output_stream: "right_eye_boundary_landmarks"
-  node_options: {
-    [type.googleapis.com/mediapipe.SplitVectorCalculatorOptions] {
-      ranges: { begin: 362 end: 363 }
-      ranges: { begin: 263 end: 264 }
-      combine_outputs: true
-    }
-  }
-}
-
 # Detects iris landmarks, eye contour landmarks, and corresponding rect (ROI).
 node {
-  calculator: "IrisLandmarkLeftAndRightCpu"
+  calculator: "IrisLandmarkLeftAndRightFromFaceLandmarksCpu"
   input_stream: "IMAGE:input_video"
-  input_stream: "LEFT_EYE_BOUNDARY_LANDMARKS:left_eye_boundary_landmarks"
-  input_stream: "RIGHT_EYE_BOUNDARY_LANDMARKS:right_eye_boundary_landmarks"
+  input_stream: "FACE_LANDMARKS:face_landmarks"
+  output_stream: "UPDATED_FACE_LANDMARKS:updated_face_landmarks"
   output_stream: "LEFT_EYE_CONTOUR_LANDMARKS:left_eye_contour_landmarks"
   output_stream: "LEFT_EYE_IRIS_LANDMARKS:left_iris_landmarks"
   output_stream: "LEFT_EYE_ROI:left_eye_rect_from_landmarks"
@@ -103,20 +75,6 @@ node {
   output_stream: "RIGHT_EYE_ROI:right_eye_rect_from_landmarks"
 }
 
-node {
-  calculator: "ConcatenateNormalizedLandmarkListCalculator"
-  input_stream: "left_eye_contour_landmarks"
-  input_stream: "right_eye_contour_landmarks"
-  output_stream: "refined_eye_landmarks"
-}
-
-node {
-  calculator: "UpdateFaceLandmarksCalculator"
-  input_stream: "NEW_EYE_LANDMARKS:refined_eye_landmarks"
-  input_stream: "FACE_LANDMARKS:face_landmarks"
-  output_stream: "UPDATED_FACE_LANDMARKS:updated_face_landmarks"
-}
-
 # Renders annotations and overlays them on top of the input images.
 node {
   calculator: "IrisRendererCpu"
diff --git a/mediapipe/graphs/iris_tracking/iris_tracking_cpu_video_input.pbtxt b/mediapipe/graphs/iris_tracking/iris_tracking_cpu_video_input.pbtxt
index 82229bd..bbbcea6 100644
--- a/mediapipe/graphs/iris_tracking/iris_tracking_cpu_video_input.pbtxt
+++ b/mediapipe/graphs/iris_tracking/iris_tracking_cpu_video_input.pbtxt
@@ -64,40 +64,12 @@ node {
   }
 }
 
-# Gets two landmarks which define left eye boundary.
-node {
-  calculator: "SplitNormalizedLandmarkListCalculator"
-  input_stream: "face_landmarks"
-  output_stream: "left_eye_boundary_landmarks"
-  node_options: {
-    [type.googleapis.com/mediapipe.SplitVectorCalculatorOptions] {
-      ranges: { begin: 33 end: 34 }
-      ranges: { begin: 133 end: 134 }
-      combine_outputs: true
-    }
-  }
-}
-
-# Gets two landmarks which define right eye boundary.
-node {
-  calculator: "SplitNormalizedLandmarkListCalculator"
-  input_stream: "face_landmarks"
-  output_stream: "right_eye_boundary_landmarks"
-  node_options: {
-    [type.googleapis.com/mediapipe.SplitVectorCalculatorOptions] {
-      ranges: { begin: 362 end: 363 }
-      ranges: { begin: 263 end: 264 }
-      combine_outputs: true
-    }
-  }
-}
-
 # Detects iris landmarks, eye contour landmarks, and corresponding rect (ROI).
 node {
-  calculator: "IrisLandmarkLeftAndRightCpu"
+  calculator: "IrisLandmarkLeftAndRightFromFaceLandmarksCpu"
   input_stream: "IMAGE:input_video"
-  input_stream: "LEFT_EYE_BOUNDARY_LANDMARKS:left_eye_boundary_landmarks"
-  input_stream: "RIGHT_EYE_BOUNDARY_LANDMARKS:right_eye_boundary_landmarks"
+  input_stream: "FACE_LANDMARKS:face_landmarks"
+  output_stream: "UPDATED_FACE_LANDMARKS:updated_face_landmarks"
   output_stream: "LEFT_EYE_CONTOUR_LANDMARKS:left_eye_contour_landmarks"
   output_stream: "LEFT_EYE_IRIS_LANDMARKS:left_iris_landmarks"
   output_stream: "LEFT_EYE_ROI:left_eye_rect_from_landmarks"
@@ -106,20 +78,6 @@ node {
   output_stream: "RIGHT_EYE_ROI:right_eye_rect_from_landmarks"
 }
 
-node {
-  calculator: "ConcatenateNormalizedLandmarkListCalculator"
-  input_stream: "left_eye_contour_landmarks"
-  input_stream: "right_eye_contour_landmarks"
-  output_stream: "refined_eye_landmarks"
-}
-
-node {
-  calculator: "UpdateFaceLandmarksCalculator"
-  input_stream: "NEW_EYE_LANDMARKS:refined_eye_landmarks"
-  input_stream: "FACE_LANDMARKS:face_landmarks"
-  output_stream: "UPDATED_FACE_LANDMARKS:updated_face_landmarks"
-}
-
 # Renders annotations and overlays them on top of the input images.
 node {
   calculator: "IrisRendererCpu"
diff --git a/mediapipe/graphs/iris_tracking/iris_tracking_gpu.pbtxt b/mediapipe/graphs/iris_tracking/iris_tracking_gpu.pbtxt
index 505a951..944fb45 100644
--- a/mediapipe/graphs/iris_tracking/iris_tracking_gpu.pbtxt
+++ b/mediapipe/graphs/iris_tracking/iris_tracking_gpu.pbtxt
@@ -81,40 +81,12 @@ node {
   }
 }
 
-# Gets two landmarks which define left eye boundary.
-node {
-  calculator: "SplitNormalizedLandmarkListCalculator"
-  input_stream: "face_landmarks"
-  output_stream: "left_eye_boundary_landmarks"
-  node_options: {
-    [type.googleapis.com/mediapipe.SplitVectorCalculatorOptions] {
-      ranges: { begin: 33 end: 34 }
-      ranges: { begin: 133 end: 134 }
-      combine_outputs: true
-    }
-  }
-}
-
-# Gets two landmarks which define right eye boundary.
-node {
-  calculator: "SplitNormalizedLandmarkListCalculator"
-  input_stream: "face_landmarks"
-  output_stream: "right_eye_boundary_landmarks"
-  node_options: {
-    [type.googleapis.com/mediapipe.SplitVectorCalculatorOptions] {
-      ranges: { begin: 362 end: 363 }
-      ranges: { begin: 263 end: 264 }
-      combine_outputs: true
-    }
-  }
-}
-
 # Detects iris landmarks, eye contour landmarks, and corresponding rect (ROI).
 node {
-  calculator: "IrisLandmarkLeftAndRightGpu"
+  calculator: "IrisLandmarkLeftAndRightFromFaceLandmarksGpu"
   input_stream: "IMAGE:throttled_input_video"
-  input_stream: "LEFT_EYE_BOUNDARY_LANDMARKS:left_eye_boundary_landmarks"
-  input_stream: "RIGHT_EYE_BOUNDARY_LANDMARKS:right_eye_boundary_landmarks"
+  input_stream: "FACE_LANDMARKS:face_landmarks"
+  output_stream: "UPDATED_FACE_LANDMARKS:updated_face_landmarks"
   output_stream: "LEFT_EYE_CONTOUR_LANDMARKS:left_eye_contour_landmarks"
   output_stream: "LEFT_EYE_IRIS_LANDMARKS:left_iris_landmarks"
   output_stream: "LEFT_EYE_ROI:left_eye_rect_from_landmarks"
@@ -123,20 +95,6 @@ node {
   output_stream: "RIGHT_EYE_ROI:right_eye_rect_from_landmarks"
 }
 
-node {
-  calculator: "ConcatenateNormalizedLandmarkListCalculator"
-  input_stream: "left_eye_contour_landmarks"
-  input_stream: "right_eye_contour_landmarks"
-  output_stream: "refined_eye_landmarks"
-}
-
-node {
-  calculator: "UpdateFaceLandmarksCalculator"
-  input_stream: "NEW_EYE_LANDMARKS:refined_eye_landmarks"
-  input_stream: "FACE_LANDMARKS:face_landmarks"
-  output_stream: "UPDATED_FACE_LANDMARKS:updated_face_landmarks"
-}
-
 # Renders annotations and overlays them on top of the input images.
 node {
   calculator: "IrisAndDepthRendererGpu"
diff --git a/mediapipe/modules/iris_landmark/BUILD b/mediapipe/modules/iris_landmark/BUILD
index e16a79b..6bf377a 100644
--- a/mediapipe/modules/iris_landmark/BUILD
+++ b/mediapipe/modules/iris_landmark/BUILD
@@ -72,6 +72,18 @@ mediapipe_simple_subgraph(
     ],
 )
 
+mediapipe_simple_subgraph(
+    name = "iris_landmark_left_and_right_from_face_landmarks_gpu",
+    graph = "iris_landmark_left_and_right_from_face_landmarks_gpu.pbtxt",
+    register_as = "IrisLandmarkLeftAndRightFromFaceLandmarksGpu",
+    deps = [
+        ":iris_landmark_left_and_right_gpu",
+        "//mediapipe/calculators/core:concatenate_normalized_landmark_list_calculator",
+        "//mediapipe/calculators/core:split_normalized_landmark_list_calculator",
+        "//mediapipe/graphs/iris_tracking/calculators:update_face_landmarks_calculator",
+    ],
+)
+
 mediapipe_simple_subgraph(
     name = "iris_landmark_left_and_right_cpu",
     graph = "iris_landmark_left_and_right_cpu.pbtxt",
@@ -85,6 +97,18 @@ mediapipe_simple_subgraph(
     ],
 )
 
+mediapipe_simple_subgraph(
+    name = "iris_landmark_left_and_right_from_face_landmarks_cpu",
+    graph = "iris_landmark_left_and_right_from_face_landmarks_cpu.pbtxt",
+    register_as = "IrisLandmarkLeftAndRightFromFaceLandmarksCpu",
+    deps = [
+        ":iris_landmark_left_and_right_cpu",
+        "//mediapipe/calculators/core:concatenate_normalized_landmark_list_calculator",
+        "//mediapipe/calculators/core:split_normalized_landmark_list_calculator",
+        "//mediapipe/graphs/iris_tracking/calculators:update_face_landmarks_calculator",
+    ],
+)
+
 exports_files(
     srcs = [
         "iris_landmark.tflite",
diff --git a/mediapipe/modules/iris_landmark/iris_landmark_left_and_right_from_face_landmarks_cpu.pbtxt b/mediapipe/modules/iris_landmark/iris_landmark_left_and_right_from_face_landmarks_cpu.pbtxt
new file mode 100644
index 0000000..e7772d6
--- /dev/null
+++ b/mediapipe/modules/iris_landmark/iris_landmark_left_and_right_from_face_landmarks_cpu.pbtxt
@@ -0,0 +1,82 @@
+# Detects iris landmarks, eye contour landmarks, and corresponding rect (ROI) from face landmarks.
+
+type: "IrisLandmarkLeftAndRightFromFaceLandmarksCpu"
+
+# CPU image. (ImageFrame)
+input_stream: "IMAGE:image"
+# Face landmarks. (NormalizedLandmarkList)
+input_stream: "FACE_LANDMARKS:face_landmarks"
+
+# Refined face landmarks. (NormalizedLandmarkList)
+output_stream: "UPDATED_FACE_LANDMARKS:refined_face_landmarks"
+
+# 71 normalized eye contour landmarks. (NormalizedLandmarkList)
+output_stream: "LEFT_EYE_CONTOUR_LANDMARKS:left_eye_contour_landmarks"
+# 5 normalized iris landmarks. (NormalizedLandmarkList)
+output_stream: "LEFT_EYE_IRIS_LANDMARKS:left_iris_landmarks"
+# Region of interest used to do calculations for the left eye. (NormalizedRect)
+output_stream: "LEFT_EYE_ROI:left_eye_rect_from_landmarks"
+
+# 71 normalized eye contour landmarks. (NormalizedLandmarkList)
+output_stream: "RIGHT_EYE_CONTOUR_LANDMARKS:right_eye_contour_landmarks"
+# 5 normalized iris landmarks. (NormalizedLandmarkList)
+output_stream: "RIGHT_EYE_IRIS_LANDMARKS:right_iris_landmarks"
+# Region of interest used to do calculations for the right eye. (NormalizedRect)
+output_stream: "RIGHT_EYE_ROI:right_eye_rect_from_landmarks"
+
+
+# Gets two landmarks which define left eye boundary.
+node {
+  calculator: "SplitNormalizedLandmarkListCalculator"
+  input_stream: "face_landmarks"
+  output_stream: "left_eye_boundary_landmarks"
+  node_options: {
+    [type.googleapis.com/mediapipe.SplitVectorCalculatorOptions] {
+      ranges: { begin: 33 end: 34 }
+      ranges: { begin: 133 end: 134 }
+      combine_outputs: true
+    }
+  }
+}
+
+# Gets two landmarks which define right eye boundary.
+node {
+  calculator: "SplitNormalizedLandmarkListCalculator"
+  input_stream: "face_landmarks"
+  output_stream: "right_eye_boundary_landmarks"
+  node_options: {
+    [type.googleapis.com/mediapipe.SplitVectorCalculatorOptions] {
+      ranges: { begin: 362 end: 363 }
+      ranges: { begin: 263 end: 264 }
+      combine_outputs: true
+    }
+  }
+}
+
+# Detects iris landmarks, eye contour landmarks, and corresponding rect (ROI).
+node {
+  calculator: "IrisLandmarkLeftAndRightCpu"
+  input_stream: "IMAGE:image"
+  input_stream: "LEFT_EYE_BOUNDARY_LANDMARKS:left_eye_boundary_landmarks"
+  input_stream: "RIGHT_EYE_BOUNDARY_LANDMARKS:right_eye_boundary_landmarks"
+  output_stream: "LEFT_EYE_CONTOUR_LANDMARKS:left_eye_contour_landmarks"
+  output_stream: "LEFT_EYE_IRIS_LANDMARKS:left_iris_landmarks"
+  output_stream: "LEFT_EYE_ROI:left_eye_rect_from_landmarks"
+  output_stream: "RIGHT_EYE_CONTOUR_LANDMARKS:right_eye_contour_landmarks"
+  output_stream: "RIGHT_EYE_IRIS_LANDMARKS:right_iris_landmarks"
+  output_stream: "RIGHT_EYE_ROI:right_eye_rect_from_landmarks"
+}
+
+node {
+  calculator: "ConcatenateNormalizedLandmarkListCalculator"
+  input_stream: "left_eye_contour_landmarks"
+  input_stream: "right_eye_contour_landmarks"
+  output_stream: "refined_eye_landmarks"
+}
+
+node {
+  calculator: "UpdateFaceLandmarksCalculator"
+  input_stream: "NEW_EYE_LANDMARKS:refined_eye_landmarks"
+  input_stream: "FACE_LANDMARKS:face_landmarks"
+  output_stream: "UPDATED_FACE_LANDMARKS:refined_face_landmarks"
+}
diff --git a/mediapipe/modules/iris_landmark/iris_landmark_left_and_right_from_face_landmarks_gpu.pbtxt b/mediapipe/modules/iris_landmark/iris_landmark_left_and_right_from_face_landmarks_gpu.pbtxt
new file mode 100644
index 0000000..f0a4ce9
--- /dev/null
+++ b/mediapipe/modules/iris_landmark/iris_landmark_left_and_right_from_face_landmarks_gpu.pbtxt
@@ -0,0 +1,81 @@
+# Detects iris landmarks, eye contour landmarks, and corresponding rect (ROI) from face landmarks.
+
+type: "IrisLandmarkLeftAndRightFromFaceLandmarksGpu"
+
+# GPU image. (GpuBuffer)
+input_stream: "IMAGE:image"
+# Face landmarks. (NormalizedLandmarkList)
+input_stream: "FACE_LANDMARKS:face_landmarks"
+
+# Refined face landmarks. (NormalizedLandmarkList)
+output_stream: "UPDATED_FACE_LANDMARKS:refined_face_landmarks"
+
+# 71 normalized eye contour landmarks. (NormalizedLandmarkList)
+output_stream: "LEFT_EYE_CONTOUR_LANDMARKS:left_eye_contour_landmarks"
+# 5 normalized iris landmarks. (NormalizedLandmarkList)
+output_stream: "LEFT_EYE_IRIS_LANDMARKS:left_iris_landmarks"
+# Region of interest used to do calculations for the left eye. (NormalizedRect)
+output_stream: "LEFT_EYE_ROI:left_eye_rect_from_landmarks"
+
+# 71 normalized eye contour landmarks. (NormalizedLandmarkList)
+output_stream: "RIGHT_EYE_CONTOUR_LANDMARKS:right_eye_contour_landmarks"
+# 5 normalized iris landmarks. (NormalizedLandmarkList)
+output_stream: "RIGHT_EYE_IRIS_LANDMARKS:right_iris_landmarks"
+# Region of interest used to do calculations for the right eye. (NormalizedRect)
+output_stream: "RIGHT_EYE_ROI:right_eye_rect_from_landmarks"
+
+# Gets two landmarks which define left eye boundary.
+node {
+  calculator: "SplitNormalizedLandmarkListCalculator"
+  input_stream: "face_landmarks"
+  output_stream: "left_eye_boundary_landmarks"
+  node_options: {
+    [type.googleapis.com/mediapipe.SplitVectorCalculatorOptions] {
+      ranges: { begin: 33 end: 34 }
+      ranges: { begin: 133 end: 134 }
+      combine_outputs: true
+    }
+  }
+}
+
+# Gets two landmarks which define right eye boundary.
+node {
+  calculator: "SplitNormalizedLandmarkListCalculator"
+  input_stream: "face_landmarks"
+  output_stream: "right_eye_boundary_landmarks"
+  node_options: {
+    [type.googleapis.com/mediapipe.SplitVectorCalculatorOptions] {
+      ranges: { begin: 362 end: 363 }
+      ranges: { begin: 263 end: 264 }
+      combine_outputs: true
+    }
+  }
+}
+
+# Detects iris landmarks, eye contour landmarks, and corresponding rect (ROI).
+node {
+  calculator: "IrisLandmarkLeftAndRightGpu"
+  input_stream: "IMAGE:image"
+  input_stream: "LEFT_EYE_BOUNDARY_LANDMARKS:left_eye_boundary_landmarks"
+  input_stream: "RIGHT_EYE_BOUNDARY_LANDMARKS:right_eye_boundary_landmarks"
+  output_stream: "LEFT_EYE_CONTOUR_LANDMARKS:left_eye_contour_landmarks"
+  output_stream: "LEFT_EYE_IRIS_LANDMARKS:left_iris_landmarks"
+  output_stream: "LEFT_EYE_ROI:left_eye_rect_from_landmarks"
+  output_stream: "RIGHT_EYE_CONTOUR_LANDMARKS:right_eye_contour_landmarks"
+  output_stream: "RIGHT_EYE_IRIS_LANDMARKS:right_iris_landmarks"
+  output_stream: "RIGHT_EYE_ROI:right_eye_rect_from_landmarks"
+}
+
+node {
+  calculator: "ConcatenateNormalizedLandmarkListCalculator"
+  input_stream: "left_eye_contour_landmarks"
+  input_stream: "right_eye_contour_landmarks"
+  output_stream: "refined_eye_landmarks"
+}
+
+node {
+  calculator: "UpdateFaceLandmarksCalculator"
+  input_stream: "NEW_EYE_LANDMARKS:refined_eye_landmarks"
+  input_stream: "FACE_LANDMARKS:face_landmarks"
+  output_stream: "UPDATED_FACE_LANDMARKS:refined_face_landmarks"
+}
